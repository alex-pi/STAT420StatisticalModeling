n <- length(model$fitted.values)
crit <- qt((1 - level) / 2, df = model$df.residual, lower.tail = FALSE)
x_mean <- mean(model$model[, names(newdata)])
Sxx <- sum((model$model[, names(newdata)] - x_mean) ^ 2)
s_e <- summary(model)$sigma
s_err <- s_e * sqrt(1 + 1/n + ((newdata[, 1] - x_mean)^2) / Sxx)
margin <- crit * s_err
lower <- estimate - margin
upper <- estimate + margin
pred_int <- c(estimate, lower, upper)
names(pred_int) <- c("estimate", "lower", "upper")
pred_int
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
predict(cat_model, newdata = newcat_1,
interval = c("prediction"), level = 0.95)
calc_pred_int <- function(model, newdata, level = 0.95) {
estimate <- predict(model, newdata = newdata)
n <- length(model$fitted.values)
crit <- qt((1 - level) / 2, df = model$df.residual, lower.tail = FALSE)
x_mean <- mean(model$model[, names(newdata)])
Sxx <- sum((model$model[, names(newdata)] - x_mean) ^ 2)
s_e <- summary(model)$sigma
s_err <- s_e * sqrt(1 + 1/n + ((newdata[, 1] - x_mean)^2) / Sxx)
margin <- crit * s_err
lower <- estimate - margin
upper <- estimate + margin
pred_int <- c(estimate, lower, upper)
names(pred_int) <- c("estimate", "lower", "upper")
pred_int
}
newcat_1 = data.frame(Bwt = 4.0)
calc_pred_int(cat_model, newcat_1)
newcat_2 = data.frame(Bwt = 3.3)
calc_pred_int(cat_model, newcat_2, level = 0.90)
predict(cat_model, newdata = newcat_2,
interval = c("prediction"), level = 0.90)
beta_0 <- 5
beta_1 <- 0
sigma <- 3
sim_stats <- loop_simulation(x, beta_0, beta_1, num_simulations = 2500, sigma = sigma)
birthday = 19820426
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
beta_0 <- 5
beta_1 <- 0
sigma <- 3
sim_stats <- loop_simulation(x, beta_0, beta_1, num_simulations = 2500, sigma = sigma)
Sxx <- sum((x - mean(x)) ^ 2)
crit <- qt(0.025, df = n - 2, lower.tail = FALSE)
margin <- crit * sim_stats$beta_1_hats_se
lower_95 <- sim_stats$beta_1_hats - margin
upper_95 <- sim_stats$beta_1_hats + margin
birthday = 19820426
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
beta_0 <- 5
beta_1 <- 0
sigma <- 3
sim_stats <- loop_simulation(x, beta_0, beta_1, num_simulations = 2500, sigma = sigma)
Sxx <- sum((x - mean(x)) ^ 2)
crit <- qt(0.005, df = n - 2, lower.tail = FALSE)
margin <- crit * sim_stats$beta_1_hats_se
lower_99 <- sim_stats$beta_1_hats - margin
upper_99 <- sim_stats$beta_1_hats + margin
birthday = 19820426
set.seed(birthday)
n = 25
x = seq(0, 2.5, length = n)
beta_0 <- 5
beta_1 <- 0
sigma <- 3
sim_stats <- loop_simulation(x, beta_0, beta_1, num_simulations = 2500, sigma = sigma)
Sxx <- sum((x - mean(x)) ^ 2)
crit <- qt(0.005, df = n - 2, lower.tail = FALSE)
margin <- crit * sim_stats$beta_1_hats_se
lower_99 <- sim_stats$beta_1_hats - margin
upper_99 <- sim_stats$beta_1_hats + margin
len <- length(lower_99)
beta_1_in_count <- sum(beta_1 > lower_99 & beta_1 < upper_99)
(proportion <- beta_1_in_count / len)
sim_stats$beta_1_hats
sim_stats$beta_1_hats > 1.2
sum(sim_stats$beta_1_hats > 1.2)
sum(abs(sim_stats$beta_1_hats) > 1.2)
pnorm(0, mean = sim_stats$beta_1_hats, sd = sd(sim_stats$beta_1_hats))
pnorm(0, mean = mean(sim_stats$beta_1_hats), sd = sd(sim_stats$beta_1_hats))
1 - pnorm(0, mean = mean(sim_stats$beta_1_hats), sd = sd(sim_stats$beta_1_hats))
?plot
# Chunk 1
cats <- MASS::cats
cat_model <- lm(Hwt ~ Bwt, data = cats)
# Chunk 2
library(knitr)
library(kableExtra)
coef_cat <- summary(cat_model)$coefficients
get_coef_data <- function(coef) {
data.frame(
row.names = c("Beta_0_hat", "Beta_1_hat"),
"Estimate" = c(coef[1, 1],
coef[2, 1]),
"t value" = c(coef[1, 3],
coef[2, 3]),
"p value" = c(formatC(coef[1, 4],format="e"),
formatC(coef[2, 4],format="e"))
)
}
gen_kable <- function(table_data, row_names = TRUE, caption = "") {
kable(table_data, format = "html", row.names = row_names,
caption = caption) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F,
font_size = 14,
position = "center")
}
tdata <- get_coef_data(coef_cat)
gen_kable(tdata, caption = "Coefficients for Linear Model on MASS::cats dataset.")
# Chunk 3
stat_decide <- function(p_value, alpha = 0.01) {
ifelse(p_value < alpha, "Reject the Null Hypothesis", "FTR the Null Hypothesis")
}
(beta_10_decision <- stat_decide(coef_cat[2, 4], alpha = 0.05))
# Chunk 4
(beta_1_interval <- confint(cat_model, parm = "Bwt", level = 0.95))
# Chunk 5
(beta_0_interval <- confint(cat_model, parm = "(Intercept)", level = 0.9))
# Chunk 6
(conf_interval <- predict(cat_model, newdata = data.frame(Bwt = c(2.1, 2.8)),
interval = c("confidence"), level = 0.9))
mean_cats <- c(mean(cats$Bwt), mean(cats$Hwt))
len_interval_21 <- conf_interval[1, 3] - conf_interval[1, 2]
len_interval_28 <- conf_interval[2, 3] - conf_interval[2, 2]
# Chunk 7
(pred_interval <- predict(cat_model, newdata = data.frame(Bwt = c(2.8, 4.2)),
interval = c("prediction"), level = 0.9))
pred_table <- data.frame(
row.names = c("Beta_0_hat", "Beta_1_hat"),
"Body Weight" = c(2.8,
4.2),
"Predicted Hwt" = c(pred_interval[1, 1],
pred_interval[2, 1]),
"Lower Bound" = c(pred_interval[1, 2],
pred_interval[2, 2]),
"Upper Bound" = c(pred_interval[1, 3],
pred_interval[2, 3])
)
gen_kable(pred_table, caption = "90% Prediction Intervals")
bwt_seq <- seq(min(cats$Bwt), min(cats$Hwt), 0.02)
conf_interval_seq <- predict(cat_model, newdata = data.frame(Bwt = bwt_seq),
interval = c("confidence"), level = 0.95)
pred_interval_seq <- predict(cat_model, newdata = data.frame(Bwt = bwt_seq),
interval = c("prediction"), level = 0.95)
dev.new(width=10, height=5, unit="in")
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (kg)",
ylab = "Heart Weight (g)",
main = "Heart Weight vs Body Weight",
pch = 20,
cex = 2,
col = "grey"
#ylim = c(min(pred_interval_seq), max(pred_interval_seq))
)
abline(cat_model, lwd = 3, col = "darkorange")
lines(bwt_seq, conf_interval_seq[, "lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(bwt_seq, conf_interval_seq[, "upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(bwt_seq, pred_interval_seq[, "lwr"], col = "darkolivegreen3", lwd = 3, lty = 4)
lines(bwt_seq, pred_interval_seq[, "upr"], col = "darkolivegreen3", lwd = 3, lty = 4)
?dev
?dev.new
fr <- function(nums, digits = 5) {
format(round(nums * 100, digits), nsmall = digits)
}
# Chunk 1
fr <- function(nums, digits = 5) {
format(round(nums * 100, digits), nsmall = digits)
}
# Chunk 2
cats <- MASS::cats
cat_model <- lm(Hwt ~ Bwt, data = cats)
# Chunk 3
library(knitr)
library(kableExtra)
coef_cat <- summary(cat_model)$coefficients
get_coef_data <- function(coef) {
data.frame(
row.names = c("Beta_0_hat", "Beta_1_hat"),
"Estimate" = c(coef[1, 1],
coef[2, 1]),
"t value" = c(coef[1, 3],
coef[2, 3]),
"p value" = c(formatC(coef[1, 4],format="e"),
formatC(coef[2, 4],format="e"))
)
}
gen_kable <- function(table_data, row_names = TRUE, caption = "") {
kable(table_data, format = "html", row.names = row_names,
caption = caption) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F,
font_size = 14,
position = "center")
}
tdata <- get_coef_data(coef_cat)
gen_kable(tdata, caption = "Coefficients for Linear Model on MASS::cats dataset.")
# Chunk 4
stat_decide <- function(p_value, alpha = 0.01) {
ifelse(p_value < alpha, "Reject the Null Hypothesis", "FTR the Null Hypothesis")
}
(beta_10_decision <- stat_decide(coef_cat[2, 4], alpha = 0.05))
# Chunk 5
(beta_1_interval <- confint(cat_model, parm = "Bwt", level = 0.95))
# Chunk 6
(beta_0_interval <- confint(cat_model, parm = "(Intercept)", level = 0.9))
# Chunk 7
(conf_interval <- predict(cat_model, newdata = data.frame(Bwt = c(2.1, 2.8)),
interval = c("confidence"), level = 0.9))
mean_cats <- c(mean(cats$Bwt), mean(cats$Hwt))
len_interval_21 <- conf_interval[1, 3] - conf_interval[1, 2]
len_interval_28 <- conf_interval[2, 3] - conf_interval[2, 2]
# Chunk 8
(pred_interval <- predict(cat_model, newdata = data.frame(Bwt = c(2.8, 4.2)),
interval = c("prediction"), level = 0.9))
pred_table <- data.frame(
row.names = c("Beta_0_hat", "Beta_1_hat"),
"Body Weight" = c(2.8,
4.2),
"Predicted Hwt" = c(pred_interval[1, 1],
pred_interval[2, 1]),
"Lower Bound" = c(pred_interval[1, 2],
pred_interval[2, 2]),
"Upper Bound" = c(pred_interval[1, 3],
pred_interval[2, 3])
)
gen_kable(pred_table, caption = "90% Prediction Intervals")
# Chunk 9
bwt_seq <- seq(min(cats$Bwt), min(cats$Hwt), 0.02)
conf_interval_seq <- predict(cat_model, newdata = data.frame(Bwt = bwt_seq),
interval = c("confidence"), level = 0.95)
pred_interval_seq <- predict(cat_model, newdata = data.frame(Bwt = bwt_seq),
interval = c("prediction"), level = 0.95)
#dev.new(width=400, height=300, unit="pixels")
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight (kg)",
ylab = "Heart Weight (g)",
main = "Heart Weight vs Body Weight",
pch = 20,
cex = 2,
col = "grey"
#ylim = c(min(pred_interval_seq), max(pred_interval_seq))
)
abline(cat_model, lwd = 3, col = "darkorange")
lines(bwt_seq, conf_interval_seq[, "lwr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(bwt_seq, conf_interval_seq[, "upr"], col = "dodgerblue", lwd = 3, lty = 2)
lines(bwt_seq, pred_interval_seq[, "lwr"], col = "darkolivegreen3", lwd = 3, lty = 4)
lines(bwt_seq, pred_interval_seq[, "upr"], col = "darkolivegreen3", lwd = 3, lty = 4)
legend("topleft", c("Estimate", "Confidence Interval", "Prediction Interval"),
lty = c(1, 2, 4),
lwd = 3,
col = c("darkorange", "dodgerblue", "darkolivegreen3"))
# Chunk 10
# Since beta_1 for the Null Hyp is not 0, I calculated t and p values using the formulas directly.
beta_1_hat <- cat_model$coefficients[2]
Sxx <- sum((cats$Bwt - mean(cats$Bwt)) ^ 2)
s_e <- summary(cat_model)$sigma
beta_1_hat_t <- (beta_1_hat - 4) / (s_e / sqrt(Sxx))
p_value <- 2 * pt(abs(beta_1_hat_t), df = nrow(cats) - 2, lower.tail = FALSE)
data_Q1g <- data.frame(
row.names = c("Beta_1_hat"),
"Estimate" = beta_1_hat,
"t value" = beta_1_hat_t,
"p value" = p_value
)
gen_kable(data_Q1g, caption = "Coefficients for beta_1_hat")
# Chunk 11
(beta_14_decision <- stat_decide(p_value, alpha = 0.05))
# Chunk 12
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
# Chunk 13
ozone_wind_model <- lm(ozone ~ wind, data = Ozone)
ozone_wind_coef <- coef(summary(ozone_wind_model))
tdata <- get_coef_data(ozone_wind_coef)
gen_kable(tdata, caption = "Coefficients for Model on ozone ~ wind.")
# Chunk 14
(beta_10_decision <- stat_decide(ozone_wind_coef[2, 4], alpha = 0.01))
# Chunk 15
ozone_temp_model <- lm(ozone ~ temp, data = Ozone)
ozone_temp_coef <- coef(summary(ozone_temp_model))
tdata <- get_coef_data(ozone_temp_coef)
gen_kable(tdata, caption = "Coefficients for Model on ozone ~ temp")
# Chunk 16
(beta_10_decision <- stat_decide(ozone_temp_coef[2, 4], alpha = 0.01))
# Chunk 17
birthday = 19820426
set.seed(birthday)
n = 50
x = seq(0, 10, length = n)
# Chunk 18
sim_slr <- function(x, beta_0, beta_1, sigma = 1) {
n <- length(x)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
y <- beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
loop_simulation <- function (x_vals, beta_0, beta_1, num_simulations = 1500, sigma = 1) {
beta_1_hats <- rep(0, num_simulations)
beta_0_hats <- rep(0, num_simulations)
# Standard Errors for each beta_1_hat
beta_1_hats_se <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_0_hats[i] <- sim_model$coefficients[1]
beta_1_hats[i] <- sim_model$coefficients[2]
beta_1_hats_se[i] <- summary(sim_model)$coefficients[2, 2]
}
list(
beta_0_hats = beta_0_hats,
beta_1_hats = beta_1_hats,
beta_1_hats_se = beta_1_hats_se
)
}
beta_hats <- loop_simulation(x, -5, 3.25, num_simulations = 2000, sigma = 4)
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(format(beta_1, nsmall = 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(format(beta_1, nsmall = 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
beta_0
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 0), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 0), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
fr <- function(nums, digits = 5) {
format(round(nums * 100, 2), nsmall = 2)
}
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 0), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 0), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
fr <- function(nums, digits = 5) {
format(round(nums, digits), nsmall = digits)
}
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 0), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 0), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, digits = 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, digits = 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, 2), mean(beta_hats$beta_0_hats),
sqrt(var_beta_0_hat), sd(beta_hats$beta_0_hats)),
"beta_1_hat" = c(fr(beta_1, 2), mean(beta_hats$beta_1_hats),
sqrt(var_beta_1_hat), sd(beta_hats$beta_1_hats))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
fr(data_Q3b, 2)
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, 2), fr(mean(beta_hats$beta_0_hats)),
fr(sqrt(var_beta_0_hat)), fr(sd(beta_hats$beta_0_hats))),
"beta_1_hat" = c(fr(beta_1, 2), mean(beta_hats$beta_1_hats),
fr(sqrt(var_beta_1_hat)), fr(sd(beta_hats$beta_1_hats)))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
# model parameters
beta_0 <- -5
beta_1 <- 3.25
sigma <- 4
# true values
Sxx <- sum((x - mean(x)) ^ 2)
var_beta_1_hat <- sigma ^ 2 / Sxx
var_beta_0_hat <- sigma ^ 2 * (1/n + mean(x) ^ 2 / Sxx)
data_Q3b <- data.frame(
row.names = c("Expected (true mean)", "Mean from simulation", "Expected SD", "SD from simulation"),
"beta_0_hat" = c(fr(beta_0, 2), fr(mean(beta_hats$beta_0_hats)),
fr(sqrt(var_beta_0_hat)), fr(sd(beta_hats$beta_0_hats))),
"beta_1_hat" = c(fr(beta_1, 2), fr(mean(beta_hats$beta_1_hats)),
fr(sqrt(var_beta_1_hat)), fr(sd(beta_hats$beta_1_hats)))
)
gen_kable(data_Q3b, caption = "True values vs Simulation values")
