data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
# Chunk 6
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
# No diagnostics run so it returns NULL
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
# No diagnostics run so it returns NULL
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
# Chunk 7
library(faraway)
#str(prostate)
# Chunk 8
pros_add <- lm(lpsa ~ ., data = prostate)
(r2 <- summary(pros_add)$r.squared)
# Chunk 9
diags <- diagnostics(pros_add, pcol = "grey", lcol = "darkorange",
detailed = TRUE)
p_val_bpt <- diags$bptest$p_val
# Chunk 10
hist(resid(pros_add),
xlab = "Residuals",
main = "Histogram of residuals, additive model",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
# Chunk 11
diags$p_val
# Chunk 12
lev_2mean <- mean(diags$leverage$values) * 2
# Chunk 13
diags$leverage$values[diags$leverage$large]
# Save the indexes for later.
large_lev_idx <- unname(which(diags$leverage$large))
# Chunk 14
diags$cookd$influential
# Get the indexes of the influential points
influe_idx <- as.numeric(names(diags$cookd$influential))
# Chunk 15
# Fit model based on the indexes excluding those for influential
# points.
pros_add_fix <- lm(lpsa ~ ., data = prostate,
subset = !(1:nrow(prostate) %in% influe_idx))
# Chunk 16
pros_add$coefficients
# Chunk 17
pros_add_fix$coefficients
# Chunk 18
diags <- diagnostics(pros_add_fix, pcol = "grey", lcol = "darkorange",
testit = FALSE)
# Chunk 19
(pred_pros_add <- pros_add$fitted.values[influe_idx])
# Chunk 20
(pred_pros_fix <- predict(pros_add_fix, newdata = prostate[influe_idx, ]))
# Chunk 21
sse_add <- sum((prostate$lpsa[influe_idx] - pred_pros_add) ^ 2)
sse_fix <- sum((prostate$lpsa[influe_idx] - pred_pros_fix) ^ 2)
# Chunk 22
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
# Chunk 23
set.seed(83)
library(lmtest)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
# Chunk 24
set.seed(83)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
# Chunk 25
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19820426
set.seed(birthday)
# Chunk 26
p_val_bp_1 = rep(0, num_sims)
p_val_bp_2 = rep(0, num_sims)
for (i in 1:num_sims) {
# Fitting model with no violations
y_1 <- 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 <- lm(y_1 ~ x_1 + x_2)
p_val_1[i] <- summary(fit_1)$coef[3, "Pr(>|t|)"]
p_val_bp_1[i] <- bptest(fit_1)$p.value
# Fitting model with violations (variance is not constant)
y_2 <- 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 <- lm(y_2 ~ x_1 + x_2)
p_val_2[i] <- summary(fit_2)$coef[3, "Pr(>|t|)"]
p_val_bp_2[i] <- bptest(fit_2)$p.value
}
# Chunk 27
table_data <- data.frame(
row.names = c("alpha=0.01", "alpha=0.05", "alpha=0.10"),
"Without violations" = c(mean(p_val_1 < 0.01),
mean(p_val_1 < 0.05),
mean(p_val_1 < 0.10)),
"With violations" = c(mean(p_val_2 < 0.01),
mean(p_val_2 < 0.05),
mean(p_val_2 < 0.10))
)
gen_kable(table_data,
col_names = c("Without violations", "With violations"),
caption = "Ratio of Rejections of Constant Variance Hypothesis")
# Chunk 28
library(faraway)
# Chunk 29
par(mfrow=c(1, 1), bg="ghostwhite")
slr_mod <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "gray", pch = 20,
main = "Weight loss vs. Iron content",
ylab = "Weight loss (mg)",
xlab = "% of Iron content")
abline(slr_mod, col = "darkorange", lwd = 3)
p_val_bp <- diags$bptest$p_val
p_val_sha <- diags$p_val
p_val_sha
diags
diags <- diagnostics(slr_mod, pcol = "grey", lcol = "darkorange",
detailed = TRUE)
diags
# Chunk 1
p, li, td {
font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
}
# Chunk 2
library(knitr)
library(kableExtra)
library(dplyr)
format_numerics <- function(data, digits = 2, notation_threshold = 0.00001) {
# make sure is a data.frame, then format
if(!is.data.frame(data)){
data <- as.data.frame(data)
}
data %>%
mutate_if(
is.numeric,
function(x) {
if_else(
abs(x) < notation_threshold,
formatC(x, digits = digits, format = "e"),
formatC(x, digits = digits, format = "f", drop0trailing = FALSE)
)
}
)
}
gen_kable <- function(table_data, add_row_names = TRUE, caption = "", col_names = c(), row_names = c()) {
f_data <- format_numerics(table_data)
if(length(col_names) != 0){
colnames(f_data) <- col_names
}
if(length(row_names) != 0){
rownames(f_data) <- row_names
}
f_data %>%
kable(., format = "html", row.names = add_row_names,
caption = caption, escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = F,
font_size = 14,
position = "center")
}
# Chunk 3: setup
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
# Chunk 4
library(lmtest)
diagnostics <- function(model, pcol = "grey", lcol = "dodgerblue",
alpha = 0.05, plotit = TRUE, testit = TRUE,
detailed = FALSE) {
diags <- NULL
if(testit) {
p_val_st <- shapiro.test(model$residuals)$p.value
p_val_bp <- bptest(model)$p.value
hval <- hatvalues(model)
cookd <- cooks.distance(model)
diags <- list(
"p_val" = p_val_st,
"decision" = ifelse(p_val_st < alpha, "Reject", "Fail to Reject")
)
# Extending the function to add more diagnostics
if(detailed) {
diags$leverage <- list(
"values" = hval,
"large" = hval > 2 * mean(hval))
diags$bptest <- list(
"p_val" = p_val_bp,
"decision" = ifelse(p_val_bp < alpha, "Reject", "Fail to Reject"))
diags$cookd <- list(
"values" = cookd,
"influential" = cookd[cookd > 4 / length(cookd)])
}
}
if(plotit) {
par(mfrow = c(1, 2), bg="ghostwhite")
plot(model$fitted.values, model$residuals,
col = pcol, pch = 20,
xlab = "Fitted", ylab = "Residuals",
main = "Fitted vs Residuals")
abline(h = 0, col = lcol, lwd = 2)
qqnorm(model$residuals, main = "Normal Q-Q Plot",
col = pcol)
qqline(model$residuals, col = lcol, lwd = 2)
}
diags
}
# Chunk 5
set.seed(40)
data_1 = data.frame(x = runif(n = 30, min = 0, max = 10),
y = rep(x = 0, times = 30))
data_1$y = with(data_1, 2 + 1 * x + rexp(n = 30))
fit_1 = lm(y ~ x, data = data_1)
data_2 = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
data_2$y = with(data_2, 5 + 2 * x + rnorm(n = 20))
fit_2 = lm(y ~ x, data = data_2)
data_3 = data.frame(x = runif(n = 40, min = 0, max = 10),
y = rep(x = 0, times = 40))
data_3$y = with(data_3, 2 + 1 * x + rnorm(n = 40, sd = x))
fit_3 = lm(y ~ x, data = data_3)
# Chunk 6
diagnostics(fit_1, plotit = FALSE)$p_val
diagnostics(fit_2, plotit = FALSE)$decision
# No diagnostics run so it returns NULL
diagnostics(fit_1, testit = FALSE, pcol = "black", lcol = "black")
# No diagnostics run so it returns NULL
diagnostics(fit_2, testit = FALSE, pcol = "grey", lcol = "green")
diagnostics(fit_3)
# Chunk 7
library(faraway)
#str(prostate)
# Chunk 8
pros_add <- lm(lpsa ~ ., data = prostate)
(r2 <- summary(pros_add)$r.squared)
# Chunk 9
diags <- diagnostics(pros_add, pcol = "grey", lcol = "darkorange",
detailed = TRUE)
p_val_bpt <- diags$bptest$p_val
# Chunk 10
hist(resid(pros_add),
xlab = "Residuals",
main = "Histogram of residuals, additive model",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
# Chunk 11
diags$p_val
# Chunk 12
lev_2mean <- mean(diags$leverage$values) * 2
# Chunk 13
diags$leverage$values[diags$leverage$large]
# Save the indexes for later.
large_lev_idx <- unname(which(diags$leverage$large))
# Chunk 14
diags$cookd$influential
# Get the indexes of the influential points
influe_idx <- as.numeric(names(diags$cookd$influential))
# Chunk 15
# Fit model based on the indexes excluding those for influential
# points.
pros_add_fix <- lm(lpsa ~ ., data = prostate,
subset = !(1:nrow(prostate) %in% influe_idx))
# Chunk 16
pros_add$coefficients
# Chunk 17
pros_add_fix$coefficients
# Chunk 18
diags <- diagnostics(pros_add_fix, pcol = "grey", lcol = "darkorange",
testit = FALSE)
# Chunk 19
(pred_pros_add <- pros_add$fitted.values[influe_idx])
# Chunk 20
(pred_pros_fix <- predict(pros_add_fix, newdata = prostate[influe_idx, ]))
# Chunk 21
sse_add <- sum((prostate$lpsa[influe_idx] - pred_pros_add) ^ 2)
sse_fix <- sum((prostate$lpsa[influe_idx] - pred_pros_fix) ^ 2)
# Chunk 22
n = 50
set.seed(420)
x_1 = runif(n, 0, 5)
x_2 = runif(n, -2, 2)
# Chunk 23
set.seed(83)
library(lmtest)
y_1 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
bptest(fit_1)
# Chunk 24
set.seed(83)
y_2 = 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
bptest(fit_2)
# Chunk 25
num_sims = 2500
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19820426
set.seed(birthday)
# Chunk 26
p_val_bp_1 = rep(0, num_sims)
p_val_bp_2 = rep(0, num_sims)
for (i in 1:num_sims) {
# Fitting model with no violations
y_1 <- 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 <- lm(y_1 ~ x_1 + x_2)
p_val_1[i] <- summary(fit_1)$coef[3, "Pr(>|t|)"]
p_val_bp_1[i] <- bptest(fit_1)$p.value
# Fitting model with violations (variance is not constant)
y_2 <- 4 + 1 * x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 <- lm(y_2 ~ x_1 + x_2)
p_val_2[i] <- summary(fit_2)$coef[3, "Pr(>|t|)"]
p_val_bp_2[i] <- bptest(fit_2)$p.value
}
# Chunk 27
table_data <- data.frame(
row.names = c("alpha=0.01", "alpha=0.05", "alpha=0.10"),
"Without violations" = c(mean(p_val_1 < 0.01),
mean(p_val_1 < 0.05),
mean(p_val_1 < 0.10)),
"With violations" = c(mean(p_val_2 < 0.01),
mean(p_val_2 < 0.05),
mean(p_val_2 < 0.10))
)
gen_kable(table_data,
col_names = c("Without violations", "With violations"),
caption = "Ratio of Rejections of Constant Variance Hypothesis")
# Chunk 28
library(faraway)
# Chunk 29
par(mfrow=c(1, 1), bg="ghostwhite")
slr_mod <- lm(loss ~ Fe, data = corrosion)
plot(loss ~ Fe, data = corrosion, col = "gray", pch = 20,
main = "Weight loss vs. Iron content",
ylab = "Weight loss (mg)",
xlab = "% of Iron content")
abline(slr_mod, col = "darkorange", lwd = 3)
# Chunk 30
par(mfrow=c(1, 1), bg="ghostwhite")
diags <- diagnostics(slr_mod, pcol = "grey", lcol = "darkorange",
detailed = TRUE)
p_val_bp <- diags$bptest$p_val
p_val_sha <- diags$p_val
p_val_bp <- diags$bptest$p_val
p_val_sha <- diags$p_val
p_val_bp <- diags$bptest$p_val
p_val_sha <- diags$p_val
p_val_bp
p_val_sha
resid(diags_d2)
d2_mod <- lm(loss ~ Fe + I(Fe^2), data = corrosion)
diags_d2 <- diagnostics(d2_mod, pcol = "grey", lcol = "darkorange",
detailed = TRUE)
d2_bp_pval <- diags_d2$bptest$p_val
graph_poly <- function(model, degree = 2) {
par(mfrow=c(1, 1), bg="ghostwhite")
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = paste("Weight Loss vs Iron content (Degree",  degree, ")"),
ylab = "Weight loss (mg)",
xlab = "% of Iron content",
cex = 1.5)
x_plot <- seq(min(corrosion$Fe), max(corrosion$Fe), by = 0.01)
lines(x_plot, predict(model,
newdata = data.frame(Fe = x_plot)),
col = "darkorange", lwd = 2)
}
resid(d2_mod)
sum(resid(d2_mod)^2)
sum(resid(d3_mod)^2)
diags_d3$bptest$p_val
diags_d1$bptest$p_val
diags_d2$bptest$p_val
diags_d4$bptest$p_val
d2_mod <- lm(loss ~ Fe + I(Fe^2), data = corrosion)
diags_d2 <- diagnostics(d2_mod, pcol = "grey", lcol = "darkorange")
d2_bp_pval <- diags_d2$bptest$p_val
graph_poly <- function(model, degree = 2) {
par(mfrow=c(1, 1), bg="ghostwhite")
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = paste("Weight Loss vs Iron content (Degree",  degree, ")"),
ylab = "Weight loss (mg)",
xlab = "% of Iron content",
cex = 1.5)
x_plot <- seq(min(corrosion$Fe), max(corrosion$Fe), by = 0.01)
lines(x_plot, predict(model,
newdata = data.frame(Fe = x_plot)),
col = "darkorange", lwd = 2)
}
d3_mod <- lm(loss ~ Fe + I(Fe^2) + I(Fe^3), data = corrosion)
diags_d3 <- diagnostics(d3_mod, pcol = "grey", lcol = "darkorange")
d3_bp_pval <- diags_d3$bptest$p_val
d4_mod <- lm(loss ~ Fe + I(Fe^2) + I(Fe^3) + I(Fe^4), data = corrosion)
diags_d4 <- diagnostics(d4_mod, pcol = "grey", lcol = "darkorange")
d4_bp_pval <- diags_d4$bptest$p_val
sum(resid(d5_mod)^2)
sum(resid(d4_mod)^2)
d3_bp_pval
d3_mod <- lm(loss ~ Fe + I(Fe^2) + I(Fe^3), data = corrosion)
diags_d3 <- diagnostics(d3_mod, pcol = "grey", lcol = "darkorange")
d3_bp_pval <- diags_d3$bptest$p_val
d3_bp_pval
summary(d4_mod)
summary(d3_mod)
summary(d4_mod)
summary(d4_mod)$coef[5, 4]
test_result <- ifelse(summary(d4_mod)$coef[5, 4] < 0.01, "Reject the Null Hypothesis", "FTR the Null Hypothesis")
test_result
graph_poly <- function(model, degree = 2) {
par(mfrow=c(1, 1), bg="ghostwhite")
plot(loss ~ Fe, data = corrosion, col = "grey", pch = 20,
main = paste("Weight Loss vs Iron content (Degree",  degree, ")"),
ylab = "Weight loss (mg)",
xlab = "% of Iron content",
cex = 1.5)
x_plot <- seq(min(corrosion$Fe), max(corrosion$Fe), by = 0.01)
lines(x_plot, predict(model,
newdata = data.frame(Fe = x_plot)),
col = "darkorange", lwd = 2)
}
graph_poly(d3_mod, degree = 3)
par(mfrow = c(1, 1), bg="ghostwhite")
hist(resid(pros_add),
xlab = "Residuals",
main = "Histogram of residuals, additive model",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
library(ggplot2)
slr_mod <- lm(price ~ carat, data = diamonds)
summary(slr_mod)
par(mfrow=c(1, 1), bg="ghostwhite")
plot(price ~ carat, data = diamonds, col = "gray", pch = 20,
main = "Price vs. Carat",
ylab = "Price (US dollars)",
xlab = "Carat (Weight)")
abline(slr_mod, col = "darkorange", lwd = 3)
qplot(price, data = diamonds, bins = 30)
par(mfrow=c(1, 1), bg="ghostwhite")
log_mod <- lm(log(price) ~ carat, data = diamonds)
plot(log(price) ~ carat, data = diamonds, col = "gray", pch = 20,
main = "log scaled Price vs. Carat",
ylab = "log scaled Price",
xlab = "Carat (Weight)")
abline(log_mod, col = "darkorange", lwd = 3)
diags_log <- diagnostics(log_mod, pcol = "grey", lcol = "darkorange",
testit = FALSE)
loglog_mod <- lm(log(price) ~ log(carat), data = diamonds)
plot(log(price) ~ log(carat), data = diamonds, col = "gray", pch = 20,
main = "log Price vs. log Carat",
ylab = "log Price",
xlab = "log Carat")
abline(loglog_mod, col = "darkorange", lwd = 3)
slr_mod <- lm(price ~ carat, data = diamonds)
summary(slr_mod)
mean(resid(slr_mod))
rst_1[abs(rst_1) > 2]
rst_3[abs(rst_3) > 2]
rst_2[abs(rst_2) > 2]
qplot(price, data = diamonds, bins = 30,
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
border = "grey"
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
border = "grey",
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
border = "grey",
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
border = "dodgerblue"
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
border = "dodgerblue",
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
col = "darkorange",
xlab = "Price (USD)",
main = "Histogram of prices")
qplot(price, data = diamonds, bins = 30,
xlab = "Price (USD)",
main = "Histogram of prices")
diags_d3$p_val
diags_d3$decision
diags_d2$p_val
diags_d4$p_val
nrow(corrosion)
diags_d3
options(scipen = 1, digits = 4, width = 80, fig.alin = "center")
diags_d3 <- diagnostics(d3_mod, pcol = "grey", lcol = "darkorange", detailed = TRUE)
diags_d3$cookd$influential
diags_d3$cookd
4 / 13
diags_d3$cookd$values
diags_d3$cookd$influential
