col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.6, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.5, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.55, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.58, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("left", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("bottom", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
?rbinom
sim_resultf$wald_pval
sum(sim_resultf$wald_pval) == "FTR")
sum(sim_resultf$wald_pval == "FTR")
sum(sim_resultf$wald_pval != "FTR")
(sim_resultf$wald_pval < 0.05)
sum(sim_resultf$wald_pval < 0.05)
sum(sim_resultf$wald_pval > 0.05)
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
num_cutoffs<- length(cutoffs)
sensitivity_values <- rep(0, num_cutoffs)
specificity_values <- rep(0, num_cutoffs)
for (i in 1:num_cutoffs) {
classifier_pred <- ifelse(predict(
wisc_add_all, wisc_test, type = "response") > cutoffs[i],
"M", "B")
confusion_mat <- make_conf_mat(classifier_pred, wisc_test$class)
(sensitivity_values[i] <- get_sens(confusion_mat))
(specificity_values[i] <- get_spec(confusion_mat))
print(confusion_mat)
}
num_cutoffs<- length(cutoffs)
sensitivity_values <- rep(0, num_cutoffs)
specificity_values <- rep(0, num_cutoffs)
for (i in 1:num_cutoffs) {
classifier_pred <- ifelse(predict(
wisc_add_all, wisc_test, type = "response") > cutoffs[i],
"M", "B")
confusion_mat <- make_conf_mat(classifier_pred, wisc_test$class)
(sensitivity_values[i] <- get_sens(confusion_mat))
(specificity_values[i] <- get_spec(confusion_mat))
print(cutoffs[i])
print(confusion_mat)
}
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(h = 0, col = "green", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = 0, col = "green", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = 0, col = "forestgreen", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = 0, col = "darkorchid4", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = 0, col = "ghostwhite", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = 0, col = "gray", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = c(0.1, 0.3), col = "gray", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1),
lwd = 2,
col = c("deepskyblue3", "darkorange"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = c(0.1, 0.3), col = "gray", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity"),
lty = c(1, 1, 2),
lwd = 2,
col = c("deepskyblue3", "darkorange", "gray"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = c(0.1, 0.3), col = "gray", lwd = 2)
legend("bottomright", c("Sensitivity", "Specificity", "Cutoff area"),
lty = c(1, 1, 2),
lwd = 2,
col = c("deepskyblue3", "darkorange", "gray"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = c(0.1, 0.3), col = "gray", lwd = 2, lty = 2)
legend("bottomright", c("Sensitivity", "Specificity", "Cutoff area"),
lty = c(1, 1, 2),
lwd = 2,
col = c("deepskyblue3", "darkorange", "gray"))
par(mfrow=c(1, 1), bg="ghostwhite")
plot(cutoffs, sensitivity_values,
main = "Sensitivity and Specificity tradeoff",
xlab = "Cutoff values",
ylab = "",
ylim = c(0.59, 1.0),
panel.first = grid(),
col = "deepskyblue3", lwd = 2,
pch=15, type="l")
lines(cutoffs, specificity_values,
col = "darkorange", lwd = 2)
abline(v = c(0.1, 0.3), col = "gray", lwd = 2, lty = 2)
legend("bottomright", c("Sensitivity", "Specificity", "Proposed cutoff area"),
lty = c(1, 1, 2),
lwd = 2,
col = c("deepskyblue3", "darkorange", "gray"))
summary(model_2c)
summary(model_2a)$coef
summary(model_2a)$coef[6, ]
(test_stat <- anova_2c[2, "Deviance"])
(test_stat <- summary(model_2a)$coef[6, "z value"])
(pvalue <- anova_2c[2, "Pr(>Chi)"])
(pvalue <- summary(model_2a)$coef[6, "Pr(>|z|)"])
stat_decide(pvalue)
(test_stat <- anova_2c[2, "Deviance"])
#(test_stat <- summary(model_2a)$coef[6, "z value"])
(pvalue <- anova_2c[2, "Pr(>Chi)"])
#(pvalue <- summary(model_2a)$coef[6, "Pr(>|z|)"])
stat_decide(pvalue)
(test_stat <- anova_2c[2, "Deviance"])
(test_stat <- summary(model_2a)$coef[6, "z value"])
(pvalue <- anova_2c[2, "Pr(>Chi)"])
(pvalue <- summary(model_2a)$coef[6, "Pr(>|z|)"])
stat_decide(pvalue)
stat_decide(pvalue, alpha = 0.01)
library(boot)
(wisc_add_3_rt <- cv.glm(wisc_train, wisc_add_3, K = 5)$delta[1])
(wisc_add_all_rt <- cv.glm(wisc_train, wisc_add_all, K = 5)$delta[1])
(wisc_aic_rt <- cv.glm(wisc_train, wisc_aic, K = 5)$delta[1])
wisc_aic$coefficients
length(wisc_aic$coefficients)
length(wisc_add_all$coefficients)
length(wisc_add_3$coefficients)
(emp_prob_gt1 <- mean(sim_result$wald_test > 1))
(true_prob_gt1 <- pnorm(1, lower.tail = FALSE))
iris_add = lm(Sepal.Length ~ Petal.Length + Species, data = iris)
iris_add$coef
confint(iris_add, level = 0.9)
iris_add1 = lm(Sepal.Length ~ 0 + Petal.Length + Species, data = iris)
iris_add1
(conf <- confint(iris_add, level = 0.9))
(conf1 <- confint(iris_add1, level = 0.9))
conf["Speciesvirginica", 1]
head(LifeCycleSavings)
head(LifeCycleSavings)
mod4 <- lm(sr ~ ., data = LifeCycleSavings)
rstandard(mod4)
head(LifeCycleSavings)
mod4 <- lm(sr ~ ., data = LifeCycleSavings)
mean(abs(rstandard(mod4)) < 2)
cooks.distance(mod4)
nrow(LifeCycleSavings)
4 / nrow(LifeCycleSavings)
LifeCycleSavings[cooks.distance(mod4) > 4 / nrow(LifeCycleSavings)]
LifeCycleSavings[cooks.distance(mod4) > 4 / nrow(LifeCycleSavings), ]
(cooks.distance(mod4) > 4 / nrow(LifeCycleSavings)) == TRUE
mod4_fix <- lm(sr ~ ., data = LifeCycleSavings,
subset = cooks.distance(mod4) <= 4 / nrow(LifeCycleSavings))
mod4_fix
mod4_fix$coefficients
sum(mod4_fix$coefficients)
airquality = na.omit(airquality)
(forth <- lm(Ozone ~ poly(Temp, degree = 4, raw = TRUE),
data = airquality))
airquality = na.omit(airquality)
forth <- lm(Ozone ~ poly(Temp, degree = 4, raw = TRUE),
data = airquality)
forth
shapiro.test(forth)
shapiro.test(forth$residuals)
airquality = na.omit(airquality)
logmod <- lm(log(Ozone) ~ Temp , data = airquality)
predict(logmod, level = 0.9, interval = "prediction",
newdata = data.frame(
Temp = 84
))
flt <- logmod$fitted < 3.5
fgt <- logmod$fitted > 3.5
flt
logmod$residuals[flt]
var(logmod$residuals[flt]) / var(logmod$residuals[fgt])
head(mtcars)
mod1 <- lm(mpg ~., data = mtcars)
vif(mod1)
library("faraway")
vif(mod1)
max(vif(mod1))
step(mod1, direction = "backward")
step(mod1, direction = "backward", trace = 0)
mod1_aic <- step(mod1, direction = "backward", trace = 0)
max(vif(mod1_aic))
vif(mod1)
max(vif(mod1))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
mod1_aic <- step(mod1, direction = "backward", trace = 0)
vif(mod1)
max(vif(mod1_aic))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
vif(mod1)
vif(mod1)
vif(mod1_aic)
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
sqrt(mean((resid(mod1_aic) / (1 - hatvalues(mod1_aic))) ^ 2))
sqrt(mean(resid(mod1) ^ 2))
sqrt(mean(resid(mod1_aic) ^ 2))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
sqrt(mean((resid(mod1_aic) / (1 - hatvalues(mod1_aic))) ^ 2))
colnames(mtcars)
mod8_bic <- step(start, direction = "forward", trace = 0,
k = log(nrow(mtcars)),
scope = mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb)
start <- lm(mpg ~ 1, data = mtcars)
mod8_bic <- step(start, direction = "forward", trace = 0,
k = log(nrow(mtcars)),
scope = mpg ~ cyl+disp+hp+drat+wt+qsec+vs+am+gear+carb)
head(LifeCycleSavings)
modsr <- lm(sr ~ . - ddpi, data = LifeCycleSavings)
modddpi <- lm(ddpi ~ . - sr, data = LifeCycleSavings)
cor(modddpi$residuals, modsr$residuals)
cor(modsr$residuals, modddpi$residuals)
mod2way <- lm(sr ~ . ^ 2, data = LifeCycleSavings)
mod2way_bic <- step(mod2way, direction = "backward", trace = 0,
k = log(nrow(mtcars)))
sqrt(mean((resid(mod2way) / (1 - hatvalues(mod2way))) ^ 2))
sqrt(mean((resid(mod2way_aic) / (1 - hatvalues(mod2way_aic))) ^ 2))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
mod2way_aic <- step(mod2way, direction = "backward", trace = 0)
sqrt(mean((resid(mod2way) / (1 - hatvalues(mod2way))) ^ 2))
sqrt(mean((resid(mod2way_aic) / (1 - hatvalues(mod2way_aic))) ^ 2))
sqrt(mean((resid(mod1) / (1 - hatvalues(mod1))) ^ 2))
Ylog <- -3 -1 + 2*0.5 + 3*0.25
1 / (1+exp(Ylog))
mod2 <- glm(am ~ mpg + hp + qsec, data = mtcars, family = binomial)
summary(mod2)$coef
summary(mod2)$coef[4, "Estimate"]
summary(mod2)$coef[2, "Estimate"]
head(mtcars)
predict(mod2, newdata = data.frame(
mpg = 21,
hp = 110,
qsec = 16.46
))
predict(mod2, newdata = data.frame(
mpg = 22,
hp = 110,
qsec = 16.46
))
8.522824 - 6.226393
predict(mod2, newdata = data.frame(
mpg = 19,
hp = 150,
qsec = 19
))
predict(mod2, newdata = data.frame(
mpg = 22,
hp = 123,
qsec = 18
), type = "response")
summary(mod2)
nullmod <- glm(am ~ 1, data = mtcars, family = binomial)
anova(nullmod, mod2)
anova(nullmod, mod2, test = "LRT")
(anov <- anova(nullmod, mod2, test = "LRT"))
names(anov)
names(summary(mod2))
summary(mod2)
summary(mod2)$null.deviance
summary(mod2)$null.deviance - summary(mod2)$deviance.resid
summary(mod2)$null.deviance
names(summary(mod2))
summary(mod2)$null.deviance - summary(mod2)$deviance
(anov <- anova(nullmod, mod2, test = "LRT"))
summary(mod2)$null.deviance - summary(mod2)$deviance
names(anov)[2, "Deviance"]
names(anov)[2, "Deviance"]
anov[2, "Deviance"]
summary(mod2)$null.deviance - summary(mod2)$deviance
summary(mod2)
summary(mod2)$coef
summary(mod2)$coef["hp", "Pr(>|z|)"]
