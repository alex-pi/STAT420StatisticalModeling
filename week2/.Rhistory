lty = c(1, 2),
lwd = 3,
col = c("darkorange", "dodgerblue"))
sim_data <- sim_slr(x = x_vals, beta_0 = 5, beta_1 = -2, sigma = 3)
sim_fit <- lm(response ~ predictor, data = sim_data)
i#sim_fit <- lm(response ~ predictor, data = sim_data)
sim_fit$coefficients
plot(response ~ predictor,
data = sim_data,
ylim = c(-15, 10))
abline(sim_fit, lwd = 3, lty = 1, col = "darkorange")
abline(beta_0, beta_1, lwd = 3, lty = 2, col = "dodgerblue")
legend("topright", c("Estimate", "Truth"),
lty = c(1, 2),
lwd = 3,
col = c("darkorange", "dodgerblue"))
# Chunk 1
cats <- MASS::cats
cat_model <- lm(Hwt ~ Bwt, data = cats)
summary(cat_model)
# Chunk 2
cat_model$coefficients
# Chunk 3
(y_hat_31 <- predict(cat_model, newdata = data.frame(Bwt = 3.1)))
# Chunk 4
3.1 %in% cats$Bwt
# Chunk 5
(max_y_in_data <- max(cats[cats$Bwt == 3.1, ]$Hwt))
(min_y_in_data <- min(cats[cats$Bwt == 3.1, ]$Hwt))
(res_on_max <- max_y_in_data - y_hat_31)
(res_on_min <- min_y_in_data - y_hat_31)
# Chunk 6
(coeff_deter <- summary(cat_model)$r.squared)
# Chunk 7
(y_hat_15 <- predict(cat_model, newdata = data.frame(Bwt = 1.5)))
# Chunk 8
1.5 <= max(cats$Bwt) & 1.5 >= min(cats$Bwt)
# Chunk 9
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight in kg",
ylab = "Heart Weight in g.",
main = "Cats Heart Weight vs Body Weight",
pch = 20,
cex = 2,
col = "grey"
)
abline(cat_model, lwd = 3, col = "darkorange")
# Chunk 10
summary(cat_model)$r.squared
# Chunk 11
get_sd_est <- function(fitted_vals, actual_vals, mle = FALSE) {
n <- length(actual_vals)
e_2 <- sum((actual_vals - fitted_vals) ^ 2)
ifelse(mle, sqrt(e_2 / n), sqrt(e_2 / (n-2)))
}
# Chunk 12
y_hat <- cat_model$fitted.values
y <- cats$Hwt
(s_e <- get_sd_est(fitted_vals = y_hat, actual_vals = y))
# Chunk 13
(s_d <- get_sd_est(fitted_vals = y_hat, actual_vals = y, mle = TRUE))
# Chunk 14
all.equal(summary(cat_model)$sigma, s_e)
all.equal(summary(cat_model)$sigma, s_d)
# Chunk 15
birthday = 19820426
set.seed(birthday)
# Chunk 16
x = runif(n = 25, 0, 10)
# Chunk 17
sim_slr <- function(x, beta_0 = 10, beta_1 = 5, sigma = 1) {
n <- length(x)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
y <- beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
# Chunk 18
beta_0 <- 5
beta_1 <- -3
n <- 25
sigma <- sqrt(10.24)
sim_data <- sim_slr(x = x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
# Chunk 19
sim_model <- lm(response ~ predictor, data = sim_data)
(beta_0_hat <- sim_model$coefficients[1])
(beta_1_hat <- sim_model$coefficients[2])
# Chunk 20
plot_simulation <- function (sim_data, sim_model, beta_0 = 5, beta_1 = -3) {
plot(response ~ predictor, data = sim_data,
xlab = "Predictor",
ylab = "Response",
main = "SLR Simulation",
pch = 20,
cex = 2,
col = "grey",
ylim = c(min(response), max(response))
)
abline(sim_model, lwd = 3, col = "darkorange")
abline(beta_0, beta_1, lwd = 3, lty = 2, col = "dodgerblue")
legend("topright", c("Estimate", "Expected"),
lty = c(1, 2),
lwd = 3,
col = c("darkorange", "dodgerblue"))
}
plot_simulation(sim_data, sim_model)
# Chunk 21
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24)) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
# Chunk 22
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
# Chunk 23
(sim_mean <- mean(beta_hat_1))
(sim_sd <- sd(beta_hat_1))
# Chunk 24
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
# Chunk 25
birthday = 19820426
set.seed(birthday)
# Chunk 26
x = runif(n = 75, 0, 10)
# Chunk 27
beta_hat_1 <- loop_simulation(x, num_simulations = 2500, beta_0 = 3, beta_1 = 0, sigma = 2)
# Chunk 28
sim_hist(beta_hat_1)
# Chunk 29
library(readr)
skeptic <- read_csv("skeptic.csv")
skeptic_model <- lm(response ~ predictor, skeptic)
(skeptic_beta_hat_1 <- skeptic_model$coefficients[2])
# Chunk 30
sim_hist(beta_hat_1)
abline(v = skeptic_beta_hat_1, col = "red")
# Chunk 31
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
proportion * 2
# Chunk 32
beta_hat_1_mean <- mean(beta_hat_1)
beta_hat_1_sd <- sd(beta_hat_1)
k_sd_from_mean <- (beta_hat_1_mean - skeptic_beta_hat_1) / beta_hat_1_sd
# Chunk 33
pnorm(unname(skeptic_beta_hat_1), mean = beta_hat_1_mean, sd = beta_hat_1_sd)
# Chunk 34
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
# Chunk 35
library(knitr)
model_wind <- lm(ozone ~ wind, data = Ozone)
model_humi <- lm(ozone ~ humidity, data = Ozone)
model_temp <- lm(ozone ~ temp, data = Ozone)
calculate_rmse <- function(model) {
sqrt(sum(model$residuals ^ 2) / (nrow(model$model)))
}
results <- data.frame(
row.names = c("Wind","Humidity","Temp"),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
col.names = c("R^2", "RMSE"),
caption = "Comparing Ozone models with 3 different predictors")
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
set.seed(birthday)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
set.seed(birthday)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
set.seed(birthday)
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
x
x = runif(n = 25, 0, 10)
x
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_slr(x = x)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram $/\hat/\beta_1$ values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram $\\hat\\beta_1$ values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram /$\\hat\\beta_1/$ values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = Tex('Histogram $\\hat\\beta_1$ values from Simulations'),
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
#main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
main = expression(beta[1]),
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
?plotmath
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
#main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
main = expression(beta[1]) + 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
#main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
main = expression(beta[1]) ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
#main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
main = beta[1] ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
#main   = 'Histogram $\\hat\\beta_1$ values from Simulations',
main = beta[1] ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = 'Histogram beta[1] values from Simulations',
#main = beta[1] ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram " ~ beta[1] ~ " values from Simulations",
#main = beta[1] ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated " ~ beta[1] ~ " values",
main   = "Histogram " ~ beta[1] ~ " values from Simulations",
#main = beta[1] ~ 'sss',
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
# Chunk 1
cats <- MASS::cats
cat_model <- lm(Hwt ~ Bwt, data = cats)
summary(cat_model)
# Chunk 2
cat_model$coefficients
# Chunk 3
(y_hat_31 <- predict(cat_model, newdata = data.frame(Bwt = 3.1)))
# Chunk 4
3.1 %in% cats$Bwt
# Chunk 5
(max_y_in_data <- max(cats[cats$Bwt == 3.1, ]$Hwt))
(min_y_in_data <- min(cats[cats$Bwt == 3.1, ]$Hwt))
(res_on_max <- max_y_in_data - y_hat_31)
(res_on_min <- min_y_in_data - y_hat_31)
# Chunk 6
(coeff_deter <- summary(cat_model)$r.squared)
# Chunk 7
(y_hat_15 <- predict(cat_model, newdata = data.frame(Bwt = 1.5)))
# Chunk 8
1.5 <= max(cats$Bwt) & 1.5 >= min(cats$Bwt)
# Chunk 9
plot(Hwt ~ Bwt, data = cats,
xlab = "Body Weight in kg",
ylab = "Heart Weight in g.",
main = "Cats Heart Weight vs Body Weight",
pch = 20,
cex = 2,
col = "grey"
)
abline(cat_model, lwd = 3, col = "darkorange")
# Chunk 10
summary(cat_model)$r.squared
# Chunk 11
get_sd_est <- function(fitted_vals, actual_vals, mle = FALSE) {
n <- length(actual_vals)
e_2 <- sum((actual_vals - fitted_vals) ^ 2)
ifelse(mle, sqrt(e_2 / n), sqrt(e_2 / (n-2)))
}
# Chunk 12
y_hat <- cat_model$fitted.values
y <- cats$Hwt
(s_e <- get_sd_est(fitted_vals = y_hat, actual_vals = y))
# Chunk 13
(s_d <- get_sd_est(fitted_vals = y_hat, actual_vals = y, mle = TRUE))
# Chunk 14
all.equal(summary(cat_model)$sigma, s_e)
all.equal(summary(cat_model)$sigma, s_d)
# Chunk 15
birthday = 19820426
set.seed(birthday)
# Chunk 16
x = runif(n = 25, 0, 10)
# Chunk 17
sim_slr <- function(x, beta_0 = 10, beta_1 = 5, sigma = 1) {
n <- length(x)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
y <- beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
# Chunk 18
beta_0 <- 5
beta_1 <- -3
n <- 25
sigma <- sqrt(10.24)
sim_data <- sim_slr(x = x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
# Chunk 19
sim_model <- lm(response ~ predictor, data = sim_data)
(beta_0_hat <- sim_model$coefficients[1])
(beta_1_hat <- sim_model$coefficients[2])
# Chunk 20
plot_simulation <- function (sim_data, sim_model, beta_0 = 5, beta_1 = -3) {
plot(response ~ predictor, data = sim_data,
xlab = "Predictor",
ylab = "Response",
main = "SLR Simulation",
pch = 20,
cex = 2,
col = "grey",
ylim = c(min(response), max(response))
)
abline(sim_model, lwd = 3, col = "darkorange")
abline(beta_0, beta_1, lwd = 3, lty = 2, col = "dodgerblue")
legend("topright", c("Estimate", "Expected"),
lty = c(1, 2),
lwd = 3,
col = c("darkorange", "dodgerblue"))
}
plot_simulation(sim_data, sim_model)
# Chunk 21
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24)) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
# Chunk 22
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
# Chunk 23
(sim_mean <- mean(beta_hat_1))
(sim_sd <- sd(beta_hat_1))
# Chunk 24
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated " ~ beta[1] ~ " values",
main   = "Histogram of " ~ beta[1] ~ " values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
# Chunk 25
birthday = 19820426
set.seed(birthday)
# Chunk 26
x = runif(n = 75, 0, 10)
# Chunk 27
beta_hat_1 <- loop_simulation(x, num_simulations = 2500, beta_0 = 3, beta_1 = 0, sigma = 2)
# Chunk 28
sim_hist(beta_hat_1)
# Chunk 29
library(readr)
skeptic <- read_csv("skeptic.csv")
skeptic_model <- lm(response ~ predictor, skeptic)
(skeptic_beta_hat_1 <- skeptic_model$coefficients[2])
# Chunk 30
sim_hist(beta_hat_1)
abline(v = skeptic_beta_hat_1, col = "red")
# Chunk 31
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
proportion * 2
# Chunk 32
beta_hat_1_mean <- mean(beta_hat_1)
beta_hat_1_sd <- sd(beta_hat_1)
k_sd_from_mean <- (beta_hat_1_mean - skeptic_beta_hat_1) / beta_hat_1_sd
# Chunk 33
pnorm(unname(skeptic_beta_hat_1), mean = beta_hat_1_mean, sd = beta_hat_1_sd)
# Chunk 34
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
# Chunk 35
library(knitr)
model_wind <- lm(ozone ~ wind, data = Ozone)
model_humi <- lm(ozone ~ humidity, data = Ozone)
model_temp <- lm(ozone ~ temp, data = Ozone)
calculate_rmse <- function(model) {
sqrt(sum(model$residuals ^ 2) / (nrow(model$model)))
}
results <- data.frame(
row.names = c("Wind","Humidity","Temp"),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
col.names = c("R^2", "RMSE"),
caption = "Comparing Ozone models with 3 different predictors")
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
proportion * 2
mean(beta_hat_1 < skeptic_beta_hat_1)
beta_hat_1_mean
beta_hat_1_mean <- mean(beta_hat_1)
beta_hat_1_mean
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
pnorm(unname(skeptic_beta_hat_1), mean = beta_hat_1_mean, sd = beta_hat_1_sd)
