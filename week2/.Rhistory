col  = "deepskyblue3",
border = "gray80"
)
beta_1 - beta_1_hat
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
sigma
sqrt(sigma)
sim_sd
beta_1 - beta_1_hat
loop_simulation <- function (num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = 10.24) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
beta_hat_1 <- loop_simulation()
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
sim_sd <- sd(beta_hat_1)
sim_mean
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
birthday = 18760613
set.seed(birthday)
x = runif(n = 75, 0, 10)
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = 10.24) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = 10.24) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
beta_hat_1 <- loop_simulation(x)
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
birthday = 19820426
set.seed(birthday)
x = runif(n = 25, 0, 10)
beta_hat_1 <- loop_simulation(x)
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
sim_sd <- sd(beta_hat_1)
sim_mean
sim_sd
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
birthday = 18760613
set.seed(birthday)
x = runif(n = 75, 0, 10)
beta_0 <- 5
beta_1 <- -3
n <- 25
sigma <- sqrt(10.24)
sim_data <- sim_slr(x = x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_0_hat <- sim_model$coefficients[1]
beta_1_hat <- sim_model$coefficients[2]
beta_0_hat
beta_1_hat
plot_simulation <- function (sim_data, sim_model, beta_0 = 5, beta_1 = -3) {
plot(response ~ predictor, data = sim_data,
xlab = "Predictor",
ylab = "Response",
main = "SLR Simulation",
pch = 20,
cex = 2,
col = "grey",
ylim = c(min(response), max(response))
)
abline(sim_model, lwd = 3, col = "darkorange")
abline(beta_0, beta_1, lwd = 3, lty = 2, col = "dodgerblue")
legend("topright", c("Estimate", "Expected"),
lty = c(1, 2),
lwd = 3,
col = c("darkorange", "dodgerblue"))
}
plot_simulation(sim_data, sim_model)
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = 10.24) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
beta_hat_1 <- loop_simulation(x)
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
sim_sd <- sd(beta_hat_1)
sim_sd
sim_mean
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24)) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
beta_hat_1 <- loop_simulation(x)
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
sim_sd <- sd(beta_hat_1)
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
loop_simulation <- function (x_vals, num_simulations = 1500, beta_0 = 5, beta_1 = -3, sigma = sqrt(10.24)) {
beta_hat_1 <- rep(0, num_simulations)
beta_hat_0 <- rep(0, num_simulations)
for (i in 1:num_simulations) {
sim_data <- sim_slr(x = x_vals, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
beta_hat_0[i] <- sim_model$coefficients[1]
beta_hat_1[i] <- sim_model$coefficients[2]
}
beta_hat_1
}
beta_hat_1 <- loop_simulation(x, sigma = sigma)
head(beta_hat_1)
sim_mean <- mean(beta_hat_1)
sim_sd <- sd(beta_hat_1)
sim_mean
sim_sd
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
birthday = 18760613
set.seed(birthday)
x = runif(n = 75, 0, 10)
beta_hat_1 <- loop_simulation(x, num_simulations = 2500, beta_0 = 3, beta_1 = 0, sigma = 2)
sim_hist <- function(beta_hat_1) {
hist(beta_hat_1,
xlab   = "Estimated Beta_1 values",
main   = "Histogram Beta_1 values from Simulations",
col  = "deepskyblue3",
border = "gray80"
)
}
sim_hist(beta_hat_1)
sim_hist(beta_hat_1)
beta_hat_1
mean(beta_hat_1)
library(readr)
skeptic <- read_csv("skeptic.csv")
library(readr)
skeptic <- read_csv("hm2/skeptic.csv")
skeptic <- read_csv("hm2/skeptic.csv")
skeptic_model <- lm(response ~ prediction, skeptic)
skeptic <- read_csv("hm2/skeptic.csv")
skeptic_model <- lm(response ~ predictor, skeptic)
skeptic_model$coefficients
beta_hat_1 <- loop_simulation(x, num_simulations = 2500, beta_0 = 3, beta_1 = 0, sigma = 2)
sim_hist(beta_hat_1)
skeptic_model <- lm(response ~ predictor, skeptic)
skeptic_beta_hat_1 <- skeptic_model$coefficients[2]
skeptic_beta_hat_1
sim_hist(beta_hat_1)
abline(v = skeptic_beta_hat_1, col = "red")
beta_hat_1 < skeptic_beta_hat_1
sum(beta_hat_1 < skeptic_beta_hat_1)
proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1)
proportion
proportion * 100
proportion * 2
birthday = 19820426
set.seed(birthday)
x = runif(n = 75, 0, 10)
beta_hat_1 <- loop_simulation(x, num_simulations = 2500, beta_0 = 3, beta_1 = 0, sigma = 2)
sim_hist(beta_hat_1)
skeptic_model <- lm(response ~ predictor, skeptic)
skeptic_beta_hat_1 <- skeptic_model$coefficients[2]
sim_hist(beta_hat_1)
abline(v = skeptic_beta_hat_1, col = "red")
summary(skeptic_model)$r.square
summary(skeptic_model)$r.square * 100
summary(skeptic_model)
plot(response ~ predictor, data = skeptic,
xlab = "Predictor",
ylab = "Response",
main = "SLR Simulation",
pch = 20,
cex = 2,
col = "grey",
ylim = c(min(response), max(response))
)
abline(skeptic_model, lwd = 3, col = "darkorange")
abline(3, 0, lwd = 3, lty = 2, col = "dodgerblue")
sim_hist(beta_hat_1)
sim_mean <- mean(beta_hat_1)
(sim_mean <- mean(beta_hat_1))
(sim_sd <- sd(beta_hat_1))
(beta_hat_1_mean <- mean(beta_hat_1))
(beta_hat_1_sd <- sd(beta_hat_1))
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
beta_hat_1_sd * 2
sim_hist(beta_hat_1)
abline(v = skeptic_beta_hat_1, col = "red")
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
beta_hat_1_sd * 2
(beta_hat_1_sd <- sd(beta_hat_1))
pnorm(skeptic_beta_hat_1*-1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
1-pnorm(skeptic_beta_hat_1*-1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
# x = mean - (k * sd)
# mean - x = k * sd
# k = (mean - x) / sd
(k <- (beta_hat_1_mean - skeptic_beta_hat_1) / beta_hat_1_sd)
(beta_hat_1_sd <- sd(beta_hat_1))
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
dnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
dnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
(beta_hat_1_mean <- mean(beta_hat_1))
(beta_hat_1_sd <- sd(beta_hat_1))
beta_hat_1_sd * 2 < abs()
(beta_hat_1_mean <- mean(beta_hat_1))
(beta_hat_1_sd <- sd(beta_hat_1))
beta_hat_1_sd * 2
dnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
(proportion <- sum(beta_hat_1 < skeptic_beta_hat_1) / length(beta_hat_1))
proportion * 2
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd) * 2
proportion * 2
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
beta_hat_1_mean <- mean(beta_hat_1)
beta_hat_1_sd <- sd(beta_hat_1)
pnorm(skeptic_beta_hat_1, mean = beta_hat_1_mean, sd = beta_hat_1_sd)
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
install.packages('mlbench')
data(Ozone, package = "mlbench")
Ozone = Ozone[, c(4, 6, 7, 8)]
colnames(Ozone) = c("ozone", "wind", "humidity", "temp")
Ozone = Ozone[complete.cases(Ozone), ]
?Ozone
??Ozone
?Ozone
model_ozone_wind <- lm(ozone ~ wind, data = Ozone)
model_ozone_wind <- lm(ozone ~ wind, data = Ozone)
model_humidity_wind <- lm(ozone ~ humidity, data = Ozone)
model_temp_wind <- lm(ozone ~ temp, data = Ozone)
summary(model_ozone_wind)
summary(model_ozone_wind)
y <- Ozone$ozone
yh <- model_ozone_wind$fitted.values
sum((y - yh) ^ 2) / (nrow(Ozone))
sqrt(sum((y - yh) ^ 2) / (nrow(Ozone)))
names(summary(model_ozone_wind))
sqrt(sum((y - yh) ^ 2) / (nrow(Ozone)))
sqrt(sum(model_ozone_wind$residuals ^ 2) / (nrow(Ozone)))
sqrt(sum(model_ozone_wind$residuals ^ 2) / (nrow(Ozone)-2))
sqrt(sum((y - yh) ^ 2) / (nrow(Ozone)))
sqrt(sum(model_ozone_wind$residuals ^ 2) / (nrow(Ozone)))
names(model_ozone_wind)
names(model_ozone_wind$model)
model_ozone_wind$model$ozone
model_ozone_wind$model$ozone == Ozone$ozone
all.equal(model_ozone_wind$model$ozone, Ozone$ozone)
nrow(Ozone)
summary(model_ozone_wind)
names(model_ozone_wind)
nrow(model_ozone_wind$model$)
nrow(model_ozone_wind$model)
nrow(Ozone)
nrow(model_ozone_wind)
names(Ozone)
model_wind <- lm(ozone ~ wind, data = Ozone)
model_humi <- lm(ozone ~ humidity, data = Ozone)
model_temp <- lm(ozone ~ temp, data = Ozone)
summary(c(model_wind, model_humi, model_temp))
summary(c(model_wind, model_humi, model_temp))$r.squared
names(summary(c(model_wind, model_humi, model_temp)))
summary(model_wind, model_humi, model_temp)
summary(model_wind)$r.squared
summary(model_wind)
results <- data.frame(
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
calculate_rmse <- function(model) {
sqrt(sum(model$residuals ^ 2) / (nrow(model$model)))
}
results <- data.frame(
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
results
results <- data.frame(
results <- data.frame(
results <- data.frame(
row.names = c('x','y','s'),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
results <- data.frame(
row.names = c('x','y','s'),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
results <- data.frame(
row.names = c('x','y','s'),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
results
results <- data.frame(
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
results
library(knitr)
kable(results, caption = "Comparing Ozone model with 3 different predictors")
kable(results, caption = "Comparing Ozone model with 3 different predictors", "html")
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor")
"pipe")
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"),
"pipe")
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"),
"pipe")
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
results <- data.frame(
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("s","Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("s","Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
results <- data.frame(
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
caption = "Comparing Ozone model with 3 different predictors",
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"))
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
results <- data.frame(
row.names = c("Wind as Predictor","Humidity as Predictor","Temp as Predictor"),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
caption = "Comparing Ozone model with 3 different predictors")
results <- data.frame(
row.names = c("Wind","Humidity","Temp"),
"r_squared" = c(summary(model_wind)$r.squared,
summary(model_humi)$r.squared,
summary(model_temp)$r.squared),
"RMSE" = c(calculate_rmse(model_wind),
calculate_rmse(model_humi),
calculate_rmse(model_temp))
)
kable(results,
col.names = c("Predictor", "R^2", "RMSE"),
caption = "Comparing Ozone model with 3 different predictors")
kable(results,
col.names = c("R^2", "RMSE"),
caption = "Comparing Ozone model with 3 different predictors")
install.packages("kableExtra")
kable(results,
col.names = c("R^2", "RMSE"),
caption = "Comparing Ozone model with 3 different predictors")
results[3]
results[3, ]
results[3, ]$r_squared
options(digits=2)
options(digits=2)
(res_on_max <- max_y_in_data - y_hat_31)
(res_on_min <- min_y_in_data - y_hat_31)
(max_y_in_data <- max(cats[cats$Bwt == 3.1, ]$Hwt))
(min_y_in_data <- min(cats[cats$Bwt == 3.1, ]$Hwt))
(res_on_max <- max_y_in_data - y_hat_31)
(res_on_min <- min_y_in_data - y_hat_31)
(s_e <- get_sd_est(fitted_vals = y_hat, actual_vals = y))
birthday = 19820426
set.seed(birthday)
x = runif(n = 25, 0, 10)
sim_slr <- function(x, beta_0 = 10, beta_1 = 5, sigma = 1) {
n <- length(x)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
y <- beta_0 + beta_1 * x + epsilon
data.frame(predictor = x, response = y)
}
beta_0 <- 5
beta_1 <- -3
n <- 25
sigma <- sqrt(10.24)
sim_data <- sim_slr(x = x, beta_0 = beta_0, beta_1 = beta_1, sigma = sigma)
sim_model <- lm(response ~ predictor, data = sim_data)
(beta_0_hat <- sim_model$coefficients[1])
(beta_1_hat <- sim_model$coefficients[2])
