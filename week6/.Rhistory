}
# Labels needed when showing more than one curve/hist
if(dist_curve != "") {
legend("topright", c("Empirical", "Real"),
lty = c(1, 2),
lwd = 3,
col = c(color, "darkorange"))
}
}
# Chunk 10
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "F Statistic Distribution"
graph_helper(signif_1$fstats, sigma_1, "f", color = "deepskyblue3", title,
auto_xlim = FALSE)
graph_helper(signif_5$fstats, sigma_5, "f", color = "deepskyblue3", title)
graph_helper(signif_10$fstats, sigma_10, "f", color = "deepskyblue3", title)
# Chunk 11
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "F Statistic Distribution"
graph_helper(nosignif_1$fstats, sigma_1, "f", color = "darkgray", title)
graph_helper(nosignif_5$fstats, sigma_5, "f", color = "darkgray", title)
graph_helper(nosignif_10$fstats, sigma_10, "f", color = "darkgray", title)
# Chunk 12
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "p-values Distribution"
graph_helper(signif_1$pvals, sigma_1, "unif", color = "deepskyblue3", title)
graph_helper(signif_5$pvals, sigma_5, "unif", color = "deepskyblue3", title)
graph_helper(signif_10$pvals, sigma_10, "unif", color = "deepskyblue3", title)
# Chunk 13
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "p-values Distribution"
graph_helper(nosignif_1$pvals, sigma_1, "unif", color = "darkgray", title)
graph_helper(nosignif_5$pvals, sigma_5, "unif", color = "darkgray", title)
graph_helper(nosignif_10$pvals, sigma_10, "unif", color = "darkgray", title)
# Chunk 14
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "R^2 Distribution"
graph_helper(signif_1$r2s, sigma_1, color = "deepskyblue3", title = title)
graph_helper(signif_5$r2s, sigma_5, color = "deepskyblue3", title = title)
graph_helper(signif_10$r2s, sigma_10, color = "deepskyblue3", title = title)
# Chunk 15
par(mfrow=c(1, 3), bg="ghostwhite")
title <- "R^2 Distribution"
graph_helper(nosignif_1$r2s, sigma_1, color = "darkgray", title = title)
graph_helper(nosignif_5$r2s, sigma_5, color = "darkgray", title = title)
graph_helper(nosignif_10$r2s, sigma_10, color = "darkgray", title = title)
# Chunk 16
rejections <- data.frame(
row.names = c("sigma=1", "sigma=5", "sigma=10"),
"significant model" = c(mean(signif_1$pvals < 0.05),
mean(signif_5$pvals < 0.05),
mean(signif_10$pvals < 0.05)),
"non-significant model" = c(mean(nosignif_1$pvals < 0.05),
mean(nosignif_5$pvals < 0.05),
mean(nosignif_10$pvals < 0.05))
)
gen_kable(rejections,
col_names = c("significant model", "non-significant model"),
caption = "Proportion of Rejections of the Null Hypothesis, alpha=0.05")
# Chunk 17
library(readr)
study2_data <- read_csv("./study_2.csv")
head(study2_data)
# Chunk 18
# Set a seed to have a stable generation of random numbers
birthday = 19820426
set.seed(birthday)
# Chunk 19
rmse <- function(expected, predicted) {
n <- length(expected)
sqrt(sum((expected - predicted)^2) / n)
}
# Generate the simulation data, concretely the y values given an epsilon
# and the known model with 6 predictors.
simulate_data <- function(X, betas, sigma) {
n <- nrow(X)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
X_full <- as.matrix(cbind(1, X[, 2:7]))
X$y <- (X_full %*% betas) + epsilon
as.data.frame(X)
}
# For each of the 9 models, this function calculates the RMSE
# for train an test data as well as the index of the minimum RMSE on each case.
collect_rmse <- function(trn_data, tst_data) {
# row 1 contains rmse values for train data on the 9 models
# row 2 contains rmse values for test data on the 9 models
rmse_matrix <- matrix(-1, 2, 9)
for(im in 1:9) {
# We take a bigger slice of the predictors until we reach 9
trn_mod <- trn_data[, 1:(im+1)]
tst_mod <- tst_data[, 1:(im+1)]
# We train the model with the train chunk ONLY
sim_model <- lm(y ~ ., data = trn_mod)
rmse_matrix[1, im] <- rmse(trn_mod$y, sim_model$fitted.values)
# We predict for the test chunk
tst_predictions <- predict(sim_model, newdata = tst_mod)
rmse_matrix[2, im] <- rmse(tst_mod$y, tst_predictions)
}
list(
rmse_matrix = rmse_matrix,
# The index indicates the model number with the smallest RMSE
trn_min_idx = which.min(rmse_matrix[1, ]),
tst_min_idx = which.min(rmse_matrix[2, ])
)
}
# Chunk 20
betas <- matrix(c(0, 3, -4, 1.6, -1.1, 0.7, 0.5))
sigma1 <- 1
sigma2 <- 2
sigma4 <- 4
num_sims <- 1000
rmse_s1_acc <- matrix(0, 2, 9)
rmse_s2_acc <- matrix(0, 2, 9)
rmse_s4_acc <- matrix(0, 2, 9)
# For each simulation we save the index of the model with the smallest RMSE
# We do that for both train and test data and each sigma
which_mins_s1 <- matrix(0, 2, num_sims)
which_mins_s2 <- matrix(0, 2, num_sims)
which_mins_s4 <- matrix(0, 2, num_sims)
# Chunk 21
# The main loop with num_sims simulations
for(i in 1:num_sims) {
# We simulate the data for the true model (with 7 betas).
# For each sigma we get a different data set.
data_sigma1 <- simulate_data(study2_data, betas, sigma1)
data_sigma2 <- simulate_data(study2_data, betas, sigma2)
data_sigma4 <- simulate_data(study2_data, betas, sigma4)
# Get 250 random indexes for observations
idxs <- 1:nrow(study2_data)
trn_idx = sample(idxs, 250)
# Training splits for each sigma
data_sigma1_trn <- data_sigma1[trn_idx, ]
data_sigma2_trn <- data_sigma2[trn_idx, ]
data_sigma4_trn <- data_sigma4[trn_idx, ]
# Testing splits for each sigma
data_sigma1_tst <- data_sigma1[!(idxs %in% trn_idx), ]
data_sigma2_tst <- data_sigma2[!(idxs %in% trn_idx), ]
data_sigma4_tst <- data_sigma4[!(idxs %in% trn_idx), ]
# We get a list with test and train RMSE and the index with
# then min RMSE for both cases
rmse_sigma1 <- collect_rmse(data_sigma1_trn, data_sigma1_tst)
rmse_sigma2 <- collect_rmse(data_sigma2_trn, data_sigma2_tst)
rmse_sigma4 <- collect_rmse(data_sigma4_trn, data_sigma4_tst)
# Accumulate the rmse in a 2 by 9 matrix,
# we'll use it later to get the portion of correct model selection
rmse_s1_acc <- rmse_s1_acc + rmse_sigma1$rmse_matrix
rmse_s2_acc <- rmse_s2_acc + rmse_sigma2$rmse_matrix
rmse_s4_acc <- rmse_s4_acc + rmse_sigma4$rmse_matrix
# Save the index of the minimum RMSE for test/train and each sigma
which_mins_s1[1, i] <- rmse_sigma1$trn_min_idx
which_mins_s1[2, i] <- rmse_sigma1$tst_min_idx
which_mins_s2[1, i] <- rmse_sigma2$trn_min_idx
which_mins_s2[2, i] <- rmse_sigma2$tst_min_idx
which_mins_s4[1, i] <- rmse_sigma4$trn_min_idx
which_mins_s4[2, i] <- rmse_sigma4$tst_min_idx
}
line_plot <- function(y1, y2, sigma, title, show_ylab = FALSE) {
ylab <- ifelse(show_ylab, paste("Average RMSE (", num_sims, "simulations )"), "")
plot(1:9, y1,
xlab = "Model size (number of predictors)",
ylab = ylab,
#main = paste(title," ( sigma =", sigma,")"),
main = bquote(.(title) ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
type='o')
lines(1:9,y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
legend("topright", c("Train Data", "Test Data"),
lty = c(2, 2),
lwd = 3,
col = c("darkorange", "forestgreen"))
}
bar_plot <- function(data, sigma) {
td <- table(data)
barplot(td,
main=paste("Model Selection based on RMSE (sigma = ", sigma," )"),
xlab="Number of Predictors",
ylab="Model Selection Count",
border="gray",
col='deepskyblue3',
density=500,
ylim = c(0, 600)
)
}
par(mfrow=c(1, 3), bg="ghostwhite")
t <- "Avg. RMSE vs Model Size"
line_plot(rmse_s1_acc[1, ] / num_sims, rmse_s1_acc[2, ] / num_sims,
sigma = 1, title = t, show_ylab = TRUE)
line_plot(rmse_s2_acc[1, ] / num_sims, rmse_s2_acc[2, ] / num_sims,
sigma = 2, title = t)
line_plot(rmse_s4_acc[1, ] / num_sims, rmse_s4_acc[2, ] / num_sims,
sigma = 4, title = t)
par(mfrow=c(1, 3), bg="ghostwhite")
bar_plot(which_mins_s1[2, ], sigma1)
bar_plot(which_mins_s2[2, ], sigma2)
bar_plot(which_mins_s4[2, ], sigma4)
line_plot <- function(y1, y2, sigma, title, show_ylab = FALSE) {
ylab <- ifelse(show_ylab, paste("Average RMSE (", num_sims, "simulations )"), "")
plot(1:9, y1,
xlab = "Model size (number of predictors)",
ylab = ylab,
#main = paste(title," ( sigma =", sigma,")"),
main = bquote(.(title) ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
type='o')
lines(1:9,y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
legend("topright", c("Train Data", "Test Data"),
lty = c(2, 2),
lwd = 3,
col = c("darkorange", "forestgreen"))
}
bar_plot <- function(data, sigma) {
td <- table(data)
barplot(td,
main=bquote(~"Model Selection based on RMSE (" ~ sigma ~ "=" ~ .(sigma) ~ ")"),
xlab="Number of Predictors",
ylab="Model Selection Count",
border="gray",
col='deepskyblue3',
density=500,
ylim = c(0, 600)
)
}
par(mfrow=c(1, 3), bg="ghostwhite")
t <- "Avg. RMSE vs Model Size"
line_plot(rmse_s1_acc[1, ] / num_sims, rmse_s1_acc[2, ] / num_sims,
sigma = 1, title = t, show_ylab = TRUE)
line_plot(rmse_s2_acc[1, ] / num_sims, rmse_s2_acc[2, ] / num_sims,
sigma = 2, title = t)
line_plot(rmse_s4_acc[1, ] / num_sims, rmse_s4_acc[2, ] / num_sims,
sigma = 4, title = t)
par(mfrow=c(1, 3), bg="ghostwhite")
bar_plot(which_mins_s1[2, ], sigma1)
bar_plot(which_mins_s2[2, ], sigma2)
bar_plot(which_mins_s4[2, ], sigma4)
par(mfrow=c(1, 3), bg="ghostwhite")
bar_plot(which_mins_s1[2, ], sigma1)
bar_plot(which_mins_s2[2, ], sigma2)
bar_plot(which_mins_s4[2, ], sigma4)
rmse_sel <- c(mean(which_mins_s1[2, ] == 6),
mean(which_mins_s2[2, ] == 6),
mean(which_mins_s4[2, ] == 6)
)
gen_kable(rmse_sel, col_names = c("Proportion"),
caption = "Proportion of Simulations selecting model 6.",
row_names = c("sigma = 1", "sigma = 2", "sigma = 4"))
rmse_sel <- c(mean(which_mins_s1[2, ] == 6),
mean(which_mins_s2[2, ] == 6),
mean(which_mins_s4[2, ] == 6)
)
gen_kable(rmse_sel, col_names = c("Proportion"),
caption = "Proportion of Simulations selecting model 6.",
row_names = c(bquote(sigma = 1), "sigma = 2", "sigma = 4"))
rmse_sel <- c(mean(which_mins_s1[2, ] == 6),
mean(which_mins_s2[2, ] == 6),
mean(which_mins_s4[2, ] == 6)
)
gen_kable(rmse_sel, col_names = c("Proportion"),
caption = "Proportion of Simulations selecting model 6.",
row_names = c(bquote(~sigma = 1), "sigma = 2", "sigma = 4"))
rmse_sel <- c(mean(which_mins_s1[2, ] == 6),
mean(which_mins_s2[2, ] == 6),
mean(which_mins_s4[2, ] == 6)
)
gen_kable(rmse_sel, col_names = c("Proportion"),
caption = "Proportion of Simulations selecting model 6.",
row_names = c(bquote(~sigma ~ "=" ~ 1), "sigma = 2", "sigma = 4"))
birthday <- 19820426
set.seed(birthday)
alpha <- 0.05
num_sims <- 1000
sigmas <- c(1, 2, 4)
# The 3 different sizes for the observations.
n_obs <- c(10, 20, 30)
# A sequence to get the beta_1 values.
betas_1 <- seq(-2, 2, 0.1)
# Contains our 3 sets of x values (with 1 predictor only)
x_values <- list(seq(0, 5, length = n_obs[1])
,seq(0, 5, length = n_obs[2])
,seq(0, 5, length = n_obs[3])
)
# a matrix where each (i,j) is a boolean with the result of significance test for
# the simulation_i and the x_values_j data set.
significance_results <- matrix(0, num_sims, length(x_values))
# a matrix where each (i,j) is the power of a beta_i given a x_values_j.
betas_by_powers <- matrix(0, length(betas_1), length(x_values))
# Fit a SLR model
sim_slr <- function(x, beta_0 = 0, beta_1, sigma) {
n <- length(x)
epsilon <- rnorm(n = n, mean = 0, sd = sigma)
y <- beta_0 + beta_1 * x + epsilon
lm(y ~ x)
}
# Extract the `p-value` we will use for testing the
# Siginificance of the Regression test.
get_p_val <- function(model) {
summary(model)$coef["x", "Pr(>|t|)"]
}
run_simulation <- function(sigma) {
# for each beta_1
for (bidx in 1:length(betas_1)) {
bi <- betas_1[bidx]
for (si in 1:num_sims) {
# Fit a model for each set of observations.
model_n10 <- sim_slr(x_values[[1]], beta_1=bi, sigma=sigma)
model_n20 <- sim_slr(x_values[[2]], beta_1=bi, sigma=sigma)
model_n30 <- sim_slr(x_values[[3]], beta_1=bi, sigma=sigma)
p_values <- c(get_p_val(model_n10)
,get_p_val(model_n20)
,get_p_val(model_n30)
)
# Store the test results for the ith simulation
significance_results[si, ] <- (p_values < alpha)
}
# When simulations are finished for a beta, calculate the power
powers <- colSums(significance_results) / num_sims
# Store the powers for the ith beta
betas_by_powers[bidx, ] <- powers
}
betas_by_powers
}
results_sigma1 <- run_simulation(sigmas[1])
results_sigma2 <- run_simulation(sigmas[2])
results_sigma4 <- run_simulation(sigmas[3])
par(mfrow=c(1, 3), bg="ghostwhite")
t <- "Avg. RMSE vs Model Size"
line_plot(rmse_s1_acc[1, ] / num_sims, rmse_s1_acc[2, ] / num_sims,
sigma = 1, title = t, show_ylab = TRUE)
line_plot(rmse_s2_acc[1, ] / num_sims, rmse_s2_acc[2, ] / num_sims,
sigma = 2, title = t)
line_plot(rmse_s4_acc[1, ] / num_sims, rmse_s4_acc[2, ] / num_sims,
sigma = 4, title = t)
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma1[ , 1],
results_sigma1[ , 2],
results_sigma1[ , 3],
sigmas[1])
power_plot <- function(x, y1, y2, y3, sigma, title="Power Vs beta_1") {
plot(x, y1,
xlab = beta[1] ~ " values",
ylab = paste("Signal Power (", num_sims, "simulations )"),
#main = paste(title," ( sigma =", sigma,")"),
main = bquote(.(title) ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
ylim= c(0,1),
type='o')
lines(x, y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
lines(x, y3,
lwd=2.5,
lty=2,
col='darkorchid4',
type='o')
legend("bottomright",
c(paste(n_obs[1], "Observations"),
paste(n_obs[2], "Observations"),
paste(n_obs[3], "Observations")),
lty = c(3, 3, 3),
lwd = 3,
col = c("darkorange", "forestgreen", "darkorchid4"))
}
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma1[ , 1],
results_sigma1[ , 2],
results_sigma1[ , 3],
sigmas[1])
power_plot <- function(x, y1, y2, y3, sigma, title="Power Vs beta_1") {
plot(x, y1,
xlab = beta[1] ~ " values",
ylab = paste("Signal Power (", num_sims, "simulations )"),
#main = paste(title," ( sigma =", sigma,")"),
main = bquote(~ "Power Vs " ~ beta_1 ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
ylim= c(0,1),
type='o')
lines(x, y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
lines(x, y3,
lwd=2.5,
lty=2,
col='darkorchid4',
type='o')
legend("bottomright",
c(paste(n_obs[1], "Observations"),
paste(n_obs[2], "Observations"),
paste(n_obs[3], "Observations")),
lty = c(3, 3, 3),
lwd = 3,
col = c("darkorange", "forestgreen", "darkorchid4"))
}
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma1[ , 1],
results_sigma1[ , 2],
results_sigma1[ , 3],
sigmas[1])
power_plot <- function(x, y1, y2, y3, sigma, title="Power Vs beta_1") {
plot(x, y1,
xlab = beta[1] ~ " values",
ylab = paste("Signal Power (", num_sims, "simulations )"),
#main = paste(title," ( sigma =", sigma,")"),
main = bquote(~ "Power Vs " ~ beta[1] ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
ylim= c(0,1),
type='o')
lines(x, y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
lines(x, y3,
lwd=2.5,
lty=2,
col='darkorchid4',
type='o')
legend("bottomright",
c(paste(n_obs[1], "Observations"),
paste(n_obs[2], "Observations"),
paste(n_obs[3], "Observations")),
lty = c(3, 3, 3),
lwd = 3,
col = c("darkorange", "forestgreen", "darkorchid4"))
}
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma1[ , 1],
results_sigma1[ , 2],
results_sigma1[ , 3],
sigmas[1])
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma2[ , 1],
results_sigma2[ , 2],
results_sigma2[ , 3],
sigmas[2])
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma4[ , 1],
results_sigma4[ , 2],
results_sigma4[ , 3],
sigmas[3])
power_plot <- function(x, y1, y2, y3, sigma) {
plot(x, y1,
xlab = beta[1] ~ " values",
ylab = paste("Signal Power (", num_sims, "simulations )"),
main = bquote(~ "Power Vs " ~ beta[1] ~ " (" ~ sigma  ~ "=" ~ .(sigma) ~")"),
col = "darkorange",
lwd=2.5,
lty=2,
ylim= c(0,1),
type='o')
lines(x, y2,
lwd=2.5,
lty=2,
col='forestgreen',
type='o')
lines(x, y3,
lwd=2.5,
lty=2,
col='darkorchid4',
type='o')
legend("bottomright",
c(paste(n_obs[1], "Observations"),
paste(n_obs[2], "Observations"),
paste(n_obs[3], "Observations")),
lty = c(3, 3, 3),
lwd = 3,
col = c("darkorange", "forestgreen", "darkorchid4"))
}
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma1[ , 1],
results_sigma1[ , 2],
results_sigma1[ , 3],
sigmas[1])
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma2[ , 1],
results_sigma2[ , 2],
results_sigma2[ , 3],
sigmas[2])
par(mfrow=c(1, 1), bg="ghostwhite")
power_plot(betas_1,
results_sigma4[ , 1],
results_sigma4[ , 2],
results_sigma4[ , 3],
sigmas[3])
